@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
- {static} PORT :int
- {static} FORMATTER : DateTimeFormatter
+ Webserver()
}

class SocketThread {
- insocked : Socked
- makeRequest(tokens : String[]) : Request
- makeRequestReader(tokens : String[]) : RequestReader
- makeRequestArea(tokens : String[]) : RequestArea
- makeHeaderAnswer() : String
- makeJsonAnswer(request : Request) : String
+ run()
}

Webserver +-right- SocketThread

note right of SocketThread
inner class
of Webserver
end note


class DirectoryUsers {
- {static} users : User[]
+ {static} makeUsers()
+ {static} findUserByCredential(credential : String) : User
}

DirectoryUsers --> "*" User : "users"

class Door {
- id : String
- closed : boolean
+ Door(id : String)
+ processRequest(request : RequestReader)
+ setState(doorState : DoorState)
+ toJson() : JSONObject
'+ toString() : String
'+ isClosed() :boolean
'+ setClosed(b : boolean)
'+ getStateName() : String
- doAction(action : String)
}

class User {
- name : String
- credential : String
+ User(name: String, credential: String)
+ toString() : String
}


class Main {
+ {static} main(args : String)
}

package doorstates {
    Door --> DoorState : "state"
    DoorState <|-- Locked
    DoorState <|-- Unlocked

    class States {
    +LOCKED : String
    +UNLOCKED : String
    }

    class Actions {
    +LOCK : String
    +UNLOCK: String
    +OPEN: String
    +CLOSE : String
    }

}


abstract class DoorState {
#door : Door
#name : String
+DoorState(door : Door)
+open()
+close()
+lock()
+unlock()
}


class Unlocked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
}


class Locked {
+ DoorState(door : Door)
+ open()
+ close()
+ lock()
+ unlock()
}

Area <|-- Partition
Area <|-- Space
Space o--> Door
Partition o--> Area : areas
DirectoryAreas --> "1" Area : rootArea

abstract class Area {
+ getDoorsGivingAccess() : Door[]
+ findAreaById(id : String) : Area
+ getSpaces()
}

class Partition {
+ getSpaces()
}

class Space {
+ getSpaces()
}

class DirectoryAreas {
- {static} rootArea : Area
- {static} allDoors : Door[]
- {static} instance : DirectoryAreas
+ {static} makeAreas()
+ {static} findAreaById(id : String) : Area
+ {static} findDoorById(id : String) : Door
+ {static} getAllDoors() : Door[]
+ {static} getInstance() : DirectoryAreas
}

DirectoryUserGroups o--> "1..*" UserGroup : userGroups
UserGroup o--> User

class DirectoryUserGroups {
- userGroups : UserGroup[]
- {static} instance : DirectoryUserGroups
+ makeUserGroups()
+ findUserByCredential(credential : String) : User
+ getInstance() : DirectoryUserGroups
}


note right of Main::main
DirectoryDoors.makeDoors()
DirectoryUsers.makeUsers()
new Webserver()
end note

Main -[hidden]down- Webserver
Webserver -[hidden]down- DirectoryAreas
DirectoryAreas -[hidden]right- DirectoryUsers
@enduml