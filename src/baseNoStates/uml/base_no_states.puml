@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

package baseNoStates {

    class User {
        - name : String
        - credential : String
        - userGroup : UserGroup
        + User(String name, String credential)
        + getCredential() : String
        + hasPermission(String requiredPermission) : boolean
        + getUserGroup() : UserGroup
        + setUserGroup(UserGroup userGroup) : void
        + toString() : String
    }

    class UserGroup {
        - groupName : String
        - users : List<User>
        - permissions : List<String>
        + UserGroup(String groupName)
        + getGroupName() : String
        + addUser(User user) : void
        + removeUser(User user) : void
        + hasUser(User user) : boolean
        + grantPermission(String permission) : void
        + revokePermission(String permission) : void
        + hasPermission(String permission) : boolean
        + toString() : String
    }

    class DirectoryUserGroup {
        - userGroups : List<UserGroup>
        + DirectoryUserGroup()
        + initializeDefaultUserGroup() : void
        + addUserGroup(UserGroup userGroup) : void
        + removeUserGroup(String groupName) : void
        + findUserGroupByName(String groupName) : UserGroup
        + listAllUserGroups() : List<UserGroup>
        + toString() : String
    }

    class Door {
        - id : String
        - state : DoorState
        + Door(String id)
        + getId() : String
        + getStateName() : String
        + processRequest(Request request) : void
        + isClosed() : boolean
        + setState(DoorState state) : void
    }

    abstract class DoorState {
        + open(Door door) : void
        + close(Door door) : void
        + lock(Door door) : void
        + unlock(Door door) : void
        + getStateName() : String
    }

    class RequestReader {
        - credential : String
        - action : String
        - now : LocalDateTime
        - doorId : String
        - userName : String
        - authorized : boolean
        - reasons : ArrayList<String>
        - doorStateName : String
        - doorClosed : boolean
        + RequestReader(String credential, String action, LocalDateTime now, String doorId)
        + setDoorStateName(String name) : void
        + getAction() : String
        + isAuthorized() : boolean
        + addReason(String reason) : void
        + toString() : String
        + answerToJson() : JSONObject
        + process() : void
        + authorize(User user, Door door) : void
    }

    class DirectoryDoors {
        - doors : List<Door>
        + DirectoryDoors()
        + findDoorById(String doorId) : Door
        + getAllDoors() : List<Door>
    }

    class DirectoryUsers {
        - users : List<User>
        + DirectoryUsers()
        + findUserByCredential(String credential) : User
        + makeUsers() : void
    }

    abstract class  Area {
        - id : String
        + Area(String id)
        + getId() : String
        + getDoorsGivingAccess() : List<Door>
    }

    class Space {
        + Space(String id)
    }

    class Partition {
        + Partition(String id)
    }

    Space --|> Area
    Partition --|> Area

    User --> UserGroup
    UserGroup o--> User : contains
    DirectoryUserGroup o--> UserGroup : manages
    Door o--> DoorState : has a
    RequestReader --> User : checks
    RequestReader --> Door : checks
    Area --> Door : accesses
}

@enduml
